class GPU {

  constructor(fpsLogger, measureLogger, gl, ext) {
    this.fpsLogger = fpsLogger;
    this.measureLogger = measureLogger;
    this.gl = gl;
    this.ext = ext;

    this.frameId = 0;
    this.elapsedAccum = 0;
    this.measureAccum = 0;
    this.queue = [{ query: this.gl.createQuery(), isMeasure: false, frameId: this.frameId }];
  }

  begin() {
    if (typeof this.queryId == 'undefined') {
      this.queryId = 0;
      this.gl.beginQuery(this.ext.TIME_ELAPSED_EXT, this.queue[0].query);
    } else {
      this.frameId++;
      this.gl.endQuery(this.ext.TIME_ELAPSED_EXT);
      while (!this.gl.getParameter(this.ext.GPU_DISJOINT_EXT) && this.queue[this.queryId] &&
          this.gl.getQueryParameter(this.queue[this.queryId].query, this.gl.QUERY_RESULT_AVAILABLE)) {
        
        const dt = this.gl.getQueryParameter(this.queue[this.queryId].query, this.gl.QUERY_RESULT);
        this.elapsedAccum += dt;
        this.measureAccum += this.queue[this.queryId].isMeasure ? dt : 0;
        let seconds = this.elapsedAccum / 1e9;

        this.queryId++;
        
        if (seconds >= 1) {
          const fps = (this.queue[this.queryId-1].frameId - this.queue[0].frameId) / seconds;
          const avgMeasure = 100 * this.measureAccum / this.elapsedAccum;
          while (seconds >= 1) {
            this.fpsLogger(fps);
            this.measureLogger(avgMeasure);
            seconds--;
          }
          this.queue.slice(0, this.queryId).forEach(q => this.gl.deleteQuery(q.query));
          this.queue.splice(0, this.queryId);
          this.elapsedAccum = 0;
          this.measureAccum = 0;
          this.queryId = 0;
        }
      }

      this.queue.push({ query: this.gl.createQuery(), isMeasure: false, frameId: this.frameId });
      this.gl.beginQuery(this.ext.TIME_ELAPSED_EXT, this.queue[this.queue.length-1].query);
    }
  }

  end() {
    this.gl.endQuery(this.ext.TIME_ELAPSED_EXT);
    this.queue[this.queue.length-1].isMeasure = true;

    this.queue.push({ query: this.gl.createQuery(), isMeasure: false, frameId: this.frameId });
    this.gl.beginQuery(this.ext.TIME_ELAPSED_EXT, this.queue[this.queue.length-1].query);
  }
}

class CPU {

  constructor(fpsLogger, measureLogger) {
    this.fpsLogger = fpsLogger;
    this.measureLogger = measureLogger;
    this.frameCount = 0;
    this.measureAccum = 0;
  }

  now() {
    return (typeof performance == 'undefined') ? Date.now() : performance.now();
  }

  begin() {
    if (typeof this.zerotime == 'undefined') {
      this.zerotime = this.now();
      this.timestamp = this.zerotime;
    } else {
      this.frameCount++;
      this.timestamp = this.now();

      const elapsed = this.timestamp - this.zerotime;
      let seconds = elapsed / 1e3;
      if (seconds >= 1) {
        const fps = this.frameCount / seconds;
        const avgMeasure = 100 * this.measureAccum / elapsed;
        while (seconds >= 1) {
          this.fpsLogger(fps);
          this.measureLogger(avgMeasure);
          seconds--;
        }
        this.measureAccum = 0;
        this.frameCount = 0;
        this.zerotime = this.timestamp;
      }
    }
  }

  end() {
    this.measureAccum += this.now() - this.timestamp;
  }
}

var UIFull = "<svg viewBox=\"0 0 100 70\" class=\"gl-bench\">\n\n<rect x=\"0\" y=\"0\" width=\"100\" height=\"70\" rx=\"26.5\" ry=\"26.5\" id=\"gl-bench-rect\"\n  fill=\"hsla(120, 50%, 60%, 0.65)\"/>\n\n<text x=\"26.5\" y=\"22\" class=\"gl-bench-text\" font-size=\"0.7em\" id=\"gl-bench-cpu\">00%</text>\n<text x=\"26.5\" y=\"34\" class=\"gl-bench-text\" font-size=\"0.7em\">CPU</text>\n<circle cx=\"26.5\" cy=\"26.5\" r=\"20\" stroke-width=\"3.5\"\n  fill=\"none\" stroke=\"black\" style=\"opacity:0.4\"/>\n<path d=\"M21.09 37.0 a 15.9155 -15.9155 0 0 1 0 -31.831 a 15.9155 -15.9155\n  0 0 1 0 31.831\" fill=\"none\" stroke=\"black\" stroke-width=\"2.6\" opacity=\"0.5\"\n  transform=\"scale(1.25663)\" stroke-dasharray=\"0, 100\" id=\"gl-bench-cpu-progress\"/>\n\n<circle cx=\"73.5\" cy=\"26.5\" r=\"20\" stroke-width=\"3.5\"\n  fill=\"none\" stroke=\"black\" style=\"opacity:0.4\"/>\n<text x=\"73.5\" y=\"22\" class=\"gl-bench-text\" font-size=\"0.7em\" id=\"gl-bench-gpu\">00%</text>\n<text x=\"73.5\" y=\"34\" class=\"gl-bench-text\" font-size=\"0.7em\">GPU</text>\n<path d=\"M58.59 37.0 a 15.9155 -15.9155 0 0 1 0 -31.831 a 15.9155 -15.9155\n  0 0 1 0 31.831\" fill=\"none\" stroke=\"black\" stroke-width=\"2.6\" opacity=\"0.5\"\n  transform=\"scale(1.25663)\" stroke-dasharray=\"0, 100\" id=\"gl-bench-gpu-progress\"/>\n\n<text x=\"50\" y=\"59\" class=\"gl-bench-text\" font-size=\".8em\" id=\"gl-bench-fps\">00 FPS</text>\n<circle cx=\"18\" cy=\"58\" r=\"3\" style=\"opacity:0.55\"/>\n<circle cx=\"82\" cy=\"58\" r=\"3\" style=\"opacity:0.55\"/>\n\n</svg>";

var UIMin = "<svg viewBox=\"0 0 100 52.632\" class=\"gl-bench\">\n\n<rect x=\"0\" y=\"0\" width=\"100\" height=\"52.632\" rx=\"26.5\" ry=\"26.316\" id=\"gl-bench-rect\"\n  fill=\"hsla(120, 50%, 60%, 0.65)\"/>\n\n<text x=\"26.5\" y=\"22\" class=\"gl-bench-text\" font-size=\"0.7em\" id=\"gl-bench-cpu\">00%</text>\n<text x=\"26.5\" y=\"34\" class=\"gl-bench-text\" font-size=\"0.7em\">CPU</text>\n<circle cx=\"26.5\" cy=\"26.5\" r=\"20\" stroke-width=\"3.5\"\n  fill=\"none\" stroke=\"black\" style=\"opacity:0.4\"/>\n<path d=\"M21.09 37.0 a 15.9155 -15.9155 0 0 1 0 -31.831 a 15.9155 -15.9155\n  0 0 1 0 31.831\" fill=\"none\" stroke=\"black\" stroke-width=\"2.6\" opacity=\"0.5\"\n  transform=\"scale(1.25663)\" stroke-dasharray=\"2, 100\" id=\"gl-bench-cpu-progress\"/>\n\n<text x=\"74\" y=\"28\" class=\"gl-bench-text\" font-size=\"0.8em\" id=\"gl-bench-fps\">00 FPS</text>\n\n</svg>";

var UIStyle = "#gl-bench-dom {\n  position: absolute;\n  left: 0;\n  top: 0;\n  margin: 0;\n}\n\n.gl-bench {\n  position: relative;\n  display: block;\n  margin: 5px;\n  cursor: pointer;\n  width: 100px;\n}\n\n.gl-bench-text {\n  font-family: sans-serif;\n  font-weight: 700;\n  dominant-baseline: middle;\n  text-anchor: middle;\n  opacity: 0.7;\n}\n";

/**
* WebGL-Benchmark Class
* @param { Boolean | undefined } isDefaultUI
* @param { Object | undefined } newLoggers
*/
class GlBench {
  constructor(isDefaultUI = true, newLoggers = null) {
    this.isDefaultUI = isDefaultUI;
    this.loggers = newLoggers ? { new : newLoggers } : {};
  }

  /**
   * Expicit initialization
   * @param { HTMLCanvasElement | undefined } targetCanvas 
   */
  init(targetCanvas = null) {

    // chose biggest canvas if not specified
    if (!targetCanvas) {
      let cs = document.getElementsByTagName('canvas');
      for (let i = 0; i < cs.length; i++) {
        if (i == 0 || targetCanvas.width * targetCanvas.height < cs[i].width * cs[i].height) {
          targetCanvas = cs[i];
        }
      }
    }

    // polyfill for webgl1 api
    let ext, gl;
    if (targetCanvas instanceof HTMLCanvasElement) {
      gl = targetCanvas.getContext('webgl') || targetCanvas.getContext('experimental-webgl');
      if (gl) {
        ext = gl.getExtension('EXT_disjoint_timer_query');
        if (ext) {
          gl.createQuery = ext.createQueryEXT.bind(ext);
          gl.deleteQuery = ext.deleteQueryEXT.bind(ext);
          gl.beginQuery = ext.beginQueryEXT.bind(ext);
          gl.endQuery = ext.endQueryEXT.bind(ext);
          gl.getQueryParameter = ext.getQueryObjectEXT.bind(ext);
          gl.QUERY_RESULT_AVAILABLE = ext.QUERY_RESULT_AVAILABLE_EXT;
          gl.QUERY_RESULT = ext.QUERY_RESULT_EXT;
        }
      } else {
        gl = targetCanvas.getContext('webgl2');
        ext = gl ? gl.getExtension('EXT_disjoint_timer_query_webgl2') : null;
      }
    }

    if (this.isDefaultUI) {

      // add default ui on page
      const rootNode = targetCanvas instanceof HTMLCanvasElement ? targetCanvas.parentNode : document.body;
      let domNode = document.getElementById('gl-bench-dom');
      if (!domNode) {
        domNode = document.createElement('div');
        domNode.id = 'gl-bench-dom';
        let styleNode = document.createElement('style');
        styleNode.innerHTML = UIStyle;
        rootNode.appendChild(styleNode);
      }
      let svgNode = document.createElement('template');
      svgNode.innerHTML = ext ? UIFull : UIMin;
      domNode.appendChild(svgNode.content.firstChild);
      rootNode.appendChild(domNode);

      // set default loggers
      this.loggers.cpuMeasure = (() => {
        const cpuUI = document.getElementById('gl-bench-cpu'),
          cpuProgressUI = document.getElementById('gl-bench-cpu-progress').style;
        return (percent) => {
          cpuUI.innerHTML = percent.toFixed(0) + '%';
          cpuProgressUI.strokeDasharray = percent.toFixed(0) + ', 100';
          if (this.loggers.new && this.loggers.new.cpuMeasure) this.loggers.new.cpuMeasure(percent);
        }
      })();
      this.loggers.cpuFps = (() => {
        const fpsUI = document.getElementById('gl-bench-fps'),
          rectUI = document.getElementById('gl-bench-rect').style;
        return (fps) => {
          fpsUI.innerHTML = fps.toFixed(0) + ' FPS';
          rectUI.fill = 'hsla(' + Math.min(120, Math.max(0, 2.4 * (fps-10))).toFixed(0) + ', 50%, 60%, 0.65)';
          if (this.loggers.new && this.loggers.new.cpuFps) this.loggers.new.cpuFps(fps);
        }
      })();
      if (ext) {
        this.loggers.gpuMeasure = (() => {
          const gpuUI = document.getElementById('gl-bench-gpu'),
            gpuProgressUI = document.getElementById('gl-bench-gpu-progress').style;
          return (persent) => {
            gpuUI.innerHTML = persent.toFixed(0) + '%';
            gpuProgressUI.strokeDasharray = persent.toFixed(0) + ', 100';
            if (this.loggers.new && this.loggers.new.gpuMeasure) this.loggers.new.gpuMeasure(persent);
          }
        })();
        this.loggers.gpuFps = (() => {
          const fpsUI = document.getElementById('gl-bench-fps'), //<--------------DRY
            rectUI = document.getElementById('gl-bench-rect').style;
          return (fps) => {
            fpsUI.innerHTML = fps.toFixed(0) + ' FPS';
            rectUI.fill = 'hsla(' + Math.min(120, Math.max(0, 2.4 * (fps-10))).toFixed(0) + ', 50%, 60%, 0.65)';
            if (this.loggers.new && this.loggers.new.cpuFps) this.loggers.new.cpuFps(fps);
          }
        })();
        this.loggers.cpuFps = () => { };
      }
      
    } else if (this.new) {
      Object.assign(this.loggers, this.new);
    }

    // init benchmarks
    this.cpu = new CPU(this.loggers.cpuFps, this.loggers.cpuMeasure);
    this.gpu = (ext) ? new GPU(this.loggers.gpuFps, this.loggers.gpuMeasure, gl, ext) : null;
  }

  /**
   * Begin bottleneck measurement
   */
  begin() {
    if (this.gpu) {
      this.gpu.begin();
      this.cpu.begin();
    } else if (this.cpu) {
      this.cpu.begin();
    } else {
      this.init();
      this.begin();
    }
  }

  /**
   * End bottleneck measurement
   */
  end() {
    if (this.gpu) {
      this.gpu.end();
      this.cpu.end();
    } else if (this.cpu) {
      this.cpu.end();
    }
  }

  /**
   * Nothing interesting here, only fps
   */
  update() {
    this.begin();
    if (this.gpu) {
      this.cpu.fpsLogger = () => {};
    }
  }
}

export default GlBench;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2wtYmVuY2gubW9kdWxlLmpzIiwic291cmNlcyI6WyIuLi9zcmMvZ3B1LmpzIiwiLi4vc3JjL2NwdS5qcyIsIi4uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBHUFUge1xuXG4gIGNvbnN0cnVjdG9yKGZwc0xvZ2dlciwgbWVhc3VyZUxvZ2dlciwgZ2wsIGV4dCkge1xuICAgIHRoaXMuZnBzTG9nZ2VyID0gZnBzTG9nZ2VyO1xuICAgIHRoaXMubWVhc3VyZUxvZ2dlciA9IG1lYXN1cmVMb2dnZXI7XG4gICAgdGhpcy5nbCA9IGdsO1xuICAgIHRoaXMuZXh0ID0gZXh0O1xuXG4gICAgdGhpcy5mcmFtZUlkID0gMDtcbiAgICB0aGlzLmVsYXBzZWRBY2N1bSA9IDA7XG4gICAgdGhpcy5tZWFzdXJlQWNjdW0gPSAwO1xuICAgIHRoaXMucXVldWUgPSBbeyBxdWVyeTogdGhpcy5nbC5jcmVhdGVRdWVyeSgpLCBpc01lYXN1cmU6IGZhbHNlLCBmcmFtZUlkOiB0aGlzLmZyYW1lSWQgfV07XG4gIH1cblxuICBiZWdpbigpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMucXVlcnlJZCA9PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5xdWVyeUlkID0gMDtcbiAgICAgIHRoaXMuZ2wuYmVnaW5RdWVyeSh0aGlzLmV4dC5USU1FX0VMQVBTRURfRVhULCB0aGlzLnF1ZXVlWzBdLnF1ZXJ5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5mcmFtZUlkKys7XG4gICAgICB0aGlzLmdsLmVuZFF1ZXJ5KHRoaXMuZXh0LlRJTUVfRUxBUFNFRF9FWFQpO1xuICAgICAgd2hpbGUgKCF0aGlzLmdsLmdldFBhcmFtZXRlcih0aGlzLmV4dC5HUFVfRElTSk9JTlRfRVhUKSAmJiB0aGlzLnF1ZXVlW3RoaXMucXVlcnlJZF0gJiZcbiAgICAgICAgICB0aGlzLmdsLmdldFF1ZXJ5UGFyYW1ldGVyKHRoaXMucXVldWVbdGhpcy5xdWVyeUlkXS5xdWVyeSwgdGhpcy5nbC5RVUVSWV9SRVNVTFRfQVZBSUxBQkxFKSkge1xuICAgICAgICBcbiAgICAgICAgY29uc3QgZHQgPSB0aGlzLmdsLmdldFF1ZXJ5UGFyYW1ldGVyKHRoaXMucXVldWVbdGhpcy5xdWVyeUlkXS5xdWVyeSwgdGhpcy5nbC5RVUVSWV9SRVNVTFQpO1xuICAgICAgICB0aGlzLmVsYXBzZWRBY2N1bSArPSBkdDtcbiAgICAgICAgdGhpcy5tZWFzdXJlQWNjdW0gKz0gdGhpcy5xdWV1ZVt0aGlzLnF1ZXJ5SWRdLmlzTWVhc3VyZSA/IGR0IDogMDtcbiAgICAgICAgbGV0IHNlY29uZHMgPSB0aGlzLmVsYXBzZWRBY2N1bSAvIDFlOTtcblxuICAgICAgICB0aGlzLnF1ZXJ5SWQrKztcbiAgICAgICAgXG4gICAgICAgIGlmIChzZWNvbmRzID49IDEpIHtcbiAgICAgICAgICBjb25zdCBmcHMgPSAodGhpcy5xdWV1ZVt0aGlzLnF1ZXJ5SWQtMV0uZnJhbWVJZCAtIHRoaXMucXVldWVbMF0uZnJhbWVJZCkgLyBzZWNvbmRzO1xuICAgICAgICAgIGNvbnN0IGF2Z01lYXN1cmUgPSAxMDAgKiB0aGlzLm1lYXN1cmVBY2N1bSAvIHRoaXMuZWxhcHNlZEFjY3VtO1xuICAgICAgICAgIHdoaWxlIChzZWNvbmRzID49IDEpIHtcbiAgICAgICAgICAgIHRoaXMuZnBzTG9nZ2VyKGZwcyk7XG4gICAgICAgICAgICB0aGlzLm1lYXN1cmVMb2dnZXIoYXZnTWVhc3VyZSk7XG4gICAgICAgICAgICBzZWNvbmRzLS07XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMucXVldWUuc2xpY2UoMCwgdGhpcy5xdWVyeUlkKS5mb3JFYWNoKHEgPT4gdGhpcy5nbC5kZWxldGVRdWVyeShxLnF1ZXJ5KSk7XG4gICAgICAgICAgdGhpcy5xdWV1ZS5zcGxpY2UoMCwgdGhpcy5xdWVyeUlkKTtcbiAgICAgICAgICB0aGlzLmVsYXBzZWRBY2N1bSA9IDA7XG4gICAgICAgICAgdGhpcy5tZWFzdXJlQWNjdW0gPSAwO1xuICAgICAgICAgIHRoaXMucXVlcnlJZCA9IDA7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5xdWV1ZS5wdXNoKHsgcXVlcnk6IHRoaXMuZ2wuY3JlYXRlUXVlcnkoKSwgaXNNZWFzdXJlOiBmYWxzZSwgZnJhbWVJZDogdGhpcy5mcmFtZUlkIH0pO1xuICAgICAgdGhpcy5nbC5iZWdpblF1ZXJ5KHRoaXMuZXh0LlRJTUVfRUxBUFNFRF9FWFQsIHRoaXMucXVldWVbdGhpcy5xdWV1ZS5sZW5ndGgtMV0ucXVlcnkpO1xuICAgIH1cbiAgfVxuXG4gIGVuZCgpIHtcbiAgICB0aGlzLmdsLmVuZFF1ZXJ5KHRoaXMuZXh0LlRJTUVfRUxBUFNFRF9FWFQpO1xuICAgIHRoaXMucXVldWVbdGhpcy5xdWV1ZS5sZW5ndGgtMV0uaXNNZWFzdXJlID0gdHJ1ZTtcblxuICAgIHRoaXMucXVldWUucHVzaCh7IHF1ZXJ5OiB0aGlzLmdsLmNyZWF0ZVF1ZXJ5KCksIGlzTWVhc3VyZTogZmFsc2UsIGZyYW1lSWQ6IHRoaXMuZnJhbWVJZCB9KTtcbiAgICB0aGlzLmdsLmJlZ2luUXVlcnkodGhpcy5leHQuVElNRV9FTEFQU0VEX0VYVCwgdGhpcy5xdWV1ZVt0aGlzLnF1ZXVlLmxlbmd0aC0xXS5xdWVyeSk7XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBDUFUge1xuXG4gIGNvbnN0cnVjdG9yKGZwc0xvZ2dlciwgbWVhc3VyZUxvZ2dlcikge1xuICAgIHRoaXMuZnBzTG9nZ2VyID0gZnBzTG9nZ2VyO1xuICAgIHRoaXMubWVhc3VyZUxvZ2dlciA9IG1lYXN1cmVMb2dnZXI7XG4gICAgdGhpcy5mcmFtZUNvdW50ID0gMDtcbiAgICB0aGlzLm1lYXN1cmVBY2N1bSA9IDA7XG4gIH1cblxuICBub3coKSB7XG4gICAgcmV0dXJuICh0eXBlb2YgcGVyZm9ybWFuY2UgPT0gJ3VuZGVmaW5lZCcpID8gRGF0ZS5ub3coKSA6IHBlcmZvcm1hbmNlLm5vdygpO1xuICB9XG5cbiAgYmVnaW4oKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLnplcm90aW1lID09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLnplcm90aW1lID0gdGhpcy5ub3coKTtcbiAgICAgIHRoaXMudGltZXN0YW1wID0gdGhpcy56ZXJvdGltZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5mcmFtZUNvdW50Kys7XG4gICAgICB0aGlzLnRpbWVzdGFtcCA9IHRoaXMubm93KCk7XG5cbiAgICAgIGNvbnN0IGVsYXBzZWQgPSB0aGlzLnRpbWVzdGFtcCAtIHRoaXMuemVyb3RpbWU7XG4gICAgICBsZXQgc2Vjb25kcyA9IGVsYXBzZWQgLyAxZTM7XG4gICAgICBpZiAoc2Vjb25kcyA+PSAxKSB7XG4gICAgICAgIGNvbnN0IGZwcyA9IHRoaXMuZnJhbWVDb3VudCAvIHNlY29uZHM7XG4gICAgICAgIGNvbnN0IGF2Z01lYXN1cmUgPSAxMDAgKiB0aGlzLm1lYXN1cmVBY2N1bSAvIGVsYXBzZWQ7XG4gICAgICAgIHdoaWxlIChzZWNvbmRzID49IDEpIHtcbiAgICAgICAgICB0aGlzLmZwc0xvZ2dlcihmcHMpO1xuICAgICAgICAgIHRoaXMubWVhc3VyZUxvZ2dlcihhdmdNZWFzdXJlKTtcbiAgICAgICAgICBzZWNvbmRzLS07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tZWFzdXJlQWNjdW0gPSAwO1xuICAgICAgICB0aGlzLmZyYW1lQ291bnQgPSAwO1xuICAgICAgICB0aGlzLnplcm90aW1lID0gdGhpcy50aW1lc3RhbXA7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZW5kKCkge1xuICAgIHRoaXMubWVhc3VyZUFjY3VtICs9IHRoaXMubm93KCkgLSB0aGlzLnRpbWVzdGFtcDtcbiAgfVxufSIsImltcG9ydCBHUFUgZnJvbSAnLi9ncHUuanMnO1xuaW1wb3J0IENQVSBmcm9tICcuL2NwdS5qcyc7XG5cbmltcG9ydCBVSUZ1bGwgZnJvbSAnLi91aS91aS1mdWxsLnN2Zyc7XG5pbXBvcnQgVUlNaW4gZnJvbSAnLi91aS91aS1taW4uc3ZnJztcbmltcG9ydCBVSVN0eWxlIGZyb20gJy4vdWkvdWkuY3NzJztcblxuLyoqXG4qIFdlYkdMLUJlbmNobWFyayBDbGFzc1xuKiBAcGFyYW0geyBCb29sZWFuIHwgdW5kZWZpbmVkIH0gaXNEZWZhdWx0VUlcbiogQHBhcmFtIHsgT2JqZWN0IHwgdW5kZWZpbmVkIH0gbmV3TG9nZ2Vyc1xuKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdsQmVuY2gge1xuICBjb25zdHJ1Y3Rvcihpc0RlZmF1bHRVSSA9IHRydWUsIG5ld0xvZ2dlcnMgPSBudWxsKSB7XG4gICAgdGhpcy5pc0RlZmF1bHRVSSA9IGlzRGVmYXVsdFVJO1xuICAgIHRoaXMubG9nZ2VycyA9IG5ld0xvZ2dlcnMgPyB7IG5ldyA6IG5ld0xvZ2dlcnMgfSA6IHt9O1xuICB9XG5cbiAgLyoqXG4gICAqIEV4cGljaXQgaW5pdGlhbGl6YXRpb25cbiAgICogQHBhcmFtIHsgSFRNTENhbnZhc0VsZW1lbnQgfCB1bmRlZmluZWQgfSB0YXJnZXRDYW52YXMgXG4gICAqL1xuICBpbml0KHRhcmdldENhbnZhcyA9IG51bGwpIHtcblxuICAgIC8vIGNob3NlIGJpZ2dlc3QgY2FudmFzIGlmIG5vdCBzcGVjaWZpZWRcbiAgICBpZiAoIXRhcmdldENhbnZhcykge1xuICAgICAgbGV0IGNzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2NhbnZhcycpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoaSA9PSAwIHx8IHRhcmdldENhbnZhcy53aWR0aCAqIHRhcmdldENhbnZhcy5oZWlnaHQgPCBjc1tpXS53aWR0aCAqIGNzW2ldLmhlaWdodCkge1xuICAgICAgICAgIHRhcmdldENhbnZhcyA9IGNzW2ldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gcG9seWZpbGwgZm9yIHdlYmdsMSBhcGlcbiAgICBsZXQgZXh0LCBnbDtcbiAgICBpZiAodGFyZ2V0Q2FudmFzIGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnQpIHtcbiAgICAgIGdsID0gdGFyZ2V0Q2FudmFzLmdldENvbnRleHQoJ3dlYmdsJykgfHwgdGFyZ2V0Q2FudmFzLmdldENvbnRleHQoJ2V4cGVyaW1lbnRhbC13ZWJnbCcpO1xuICAgICAgaWYgKGdsKSB7XG4gICAgICAgIGV4dCA9IGdsLmdldEV4dGVuc2lvbignRVhUX2Rpc2pvaW50X3RpbWVyX3F1ZXJ5Jyk7XG4gICAgICAgIGlmIChleHQpIHtcbiAgICAgICAgICBnbC5jcmVhdGVRdWVyeSA9IGV4dC5jcmVhdGVRdWVyeUVYVC5iaW5kKGV4dCk7XG4gICAgICAgICAgZ2wuZGVsZXRlUXVlcnkgPSBleHQuZGVsZXRlUXVlcnlFWFQuYmluZChleHQpO1xuICAgICAgICAgIGdsLmJlZ2luUXVlcnkgPSBleHQuYmVnaW5RdWVyeUVYVC5iaW5kKGV4dCk7XG4gICAgICAgICAgZ2wuZW5kUXVlcnkgPSBleHQuZW5kUXVlcnlFWFQuYmluZChleHQpO1xuICAgICAgICAgIGdsLmdldFF1ZXJ5UGFyYW1ldGVyID0gZXh0LmdldFF1ZXJ5T2JqZWN0RVhULmJpbmQoZXh0KTtcbiAgICAgICAgICBnbC5RVUVSWV9SRVNVTFRfQVZBSUxBQkxFID0gZXh0LlFVRVJZX1JFU1VMVF9BVkFJTEFCTEVfRVhUO1xuICAgICAgICAgIGdsLlFVRVJZX1JFU1VMVCA9IGV4dC5RVUVSWV9SRVNVTFRfRVhUO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBnbCA9IHRhcmdldENhbnZhcy5nZXRDb250ZXh0KCd3ZWJnbDInKTtcbiAgICAgICAgZXh0ID0gZ2wgPyBnbC5nZXRFeHRlbnNpb24oJ0VYVF9kaXNqb2ludF90aW1lcl9xdWVyeV93ZWJnbDInKSA6IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNEZWZhdWx0VUkpIHtcblxuICAgICAgLy8gYWRkIGRlZmF1bHQgdWkgb24gcGFnZVxuICAgICAgY29uc3Qgcm9vdE5vZGUgPSB0YXJnZXRDYW52YXMgaW5zdGFuY2VvZiBIVE1MQ2FudmFzRWxlbWVudCA/IHRhcmdldENhbnZhcy5wYXJlbnROb2RlIDogZG9jdW1lbnQuYm9keTtcbiAgICAgIGxldCBkb21Ob2RlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2dsLWJlbmNoLWRvbScpO1xuICAgICAgaWYgKCFkb21Ob2RlKSB7XG4gICAgICAgIGRvbU5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgZG9tTm9kZS5pZCA9ICdnbC1iZW5jaC1kb20nO1xuICAgICAgICBsZXQgc3R5bGVOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICAgICAgc3R5bGVOb2RlLmlubmVySFRNTCA9IFVJU3R5bGU7XG4gICAgICAgIHJvb3ROb2RlLmFwcGVuZENoaWxkKHN0eWxlTm9kZSk7XG4gICAgICB9XG4gICAgICBsZXQgc3ZnTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XG4gICAgICBzdmdOb2RlLmlubmVySFRNTCA9IGV4dCA/IFVJRnVsbCA6IFVJTWluO1xuICAgICAgZG9tTm9kZS5hcHBlbmRDaGlsZChzdmdOb2RlLmNvbnRlbnQuZmlyc3RDaGlsZCk7XG4gICAgICByb290Tm9kZS5hcHBlbmRDaGlsZChkb21Ob2RlKTtcblxuICAgICAgLy8gc2V0IGRlZmF1bHQgbG9nZ2Vyc1xuICAgICAgdGhpcy5sb2dnZXJzLmNwdU1lYXN1cmUgPSAoKCkgPT4ge1xuICAgICAgICBjb25zdCBjcHVVSSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnbC1iZW5jaC1jcHUnKSxcbiAgICAgICAgICBjcHVQcm9ncmVzc1VJID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2dsLWJlbmNoLWNwdS1wcm9ncmVzcycpLnN0eWxlO1xuICAgICAgICByZXR1cm4gKHBlcmNlbnQpID0+IHtcbiAgICAgICAgICBjcHVVSS5pbm5lckhUTUwgPSBwZXJjZW50LnRvRml4ZWQoMCkgKyAnJSc7XG4gICAgICAgICAgY3B1UHJvZ3Jlc3NVSS5zdHJva2VEYXNoYXJyYXkgPSBwZXJjZW50LnRvRml4ZWQoMCkgKyAnLCAxMDAnO1xuICAgICAgICAgIGlmICh0aGlzLmxvZ2dlcnMubmV3ICYmIHRoaXMubG9nZ2Vycy5uZXcuY3B1TWVhc3VyZSkgdGhpcy5sb2dnZXJzLm5ldy5jcHVNZWFzdXJlKHBlcmNlbnQpO1xuICAgICAgICB9XG4gICAgICB9KSgpO1xuICAgICAgdGhpcy5sb2dnZXJzLmNwdUZwcyA9ICgoKSA9PiB7XG4gICAgICAgIGNvbnN0IGZwc1VJID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2dsLWJlbmNoLWZwcycpLFxuICAgICAgICAgIHJlY3RVSSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnbC1iZW5jaC1yZWN0Jykuc3R5bGU7XG4gICAgICAgIHJldHVybiAoZnBzKSA9PiB7XG4gICAgICAgICAgZnBzVUkuaW5uZXJIVE1MID0gZnBzLnRvRml4ZWQoMCkgKyAnIEZQUyc7XG4gICAgICAgICAgcmVjdFVJLmZpbGwgPSAnaHNsYSgnICsgTWF0aC5taW4oMTIwLCBNYXRoLm1heCgwLCAyLjQgKiAoZnBzLTEwKSkpLnRvRml4ZWQoMCkgKyAnLCA1MCUsIDYwJSwgMC42NSknXG4gICAgICAgICAgaWYgKHRoaXMubG9nZ2Vycy5uZXcgJiYgdGhpcy5sb2dnZXJzLm5ldy5jcHVGcHMpIHRoaXMubG9nZ2Vycy5uZXcuY3B1RnBzKGZwcyk7XG4gICAgICAgIH1cbiAgICAgIH0pKCk7XG4gICAgICBpZiAoZXh0KSB7XG4gICAgICAgIHRoaXMubG9nZ2Vycy5ncHVNZWFzdXJlID0gKCgpID0+IHtcbiAgICAgICAgICBjb25zdCBncHVVSSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnbC1iZW5jaC1ncHUnKSxcbiAgICAgICAgICAgIGdwdVByb2dyZXNzVUkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2wtYmVuY2gtZ3B1LXByb2dyZXNzJykuc3R5bGU7XG4gICAgICAgICAgcmV0dXJuIChwZXJzZW50KSA9PiB7XG4gICAgICAgICAgICBncHVVSS5pbm5lckhUTUwgPSBwZXJzZW50LnRvRml4ZWQoMCkgKyAnJSc7XG4gICAgICAgICAgICBncHVQcm9ncmVzc1VJLnN0cm9rZURhc2hhcnJheSA9IHBlcnNlbnQudG9GaXhlZCgwKSArICcsIDEwMCc7XG4gICAgICAgICAgICBpZiAodGhpcy5sb2dnZXJzLm5ldyAmJiB0aGlzLmxvZ2dlcnMubmV3LmdwdU1lYXN1cmUpIHRoaXMubG9nZ2Vycy5uZXcuZ3B1TWVhc3VyZShwZXJzZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pKCk7XG4gICAgICAgIHRoaXMubG9nZ2Vycy5ncHVGcHMgPSAoKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGZwc1VJID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2dsLWJlbmNoLWZwcycpLCAvLzwtLS0tLS0tLS0tLS0tLURSWVxuICAgICAgICAgICAgcmVjdFVJID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2dsLWJlbmNoLXJlY3QnKS5zdHlsZTtcbiAgICAgICAgICByZXR1cm4gKGZwcykgPT4ge1xuICAgICAgICAgICAgZnBzVUkuaW5uZXJIVE1MID0gZnBzLnRvRml4ZWQoMCkgKyAnIEZQUyc7XG4gICAgICAgICAgICByZWN0VUkuZmlsbCA9ICdoc2xhKCcgKyBNYXRoLm1pbigxMjAsIE1hdGgubWF4KDAsIDIuNCAqIChmcHMtMTApKSkudG9GaXhlZCgwKSArICcsIDUwJSwgNjAlLCAwLjY1KSdcbiAgICAgICAgICAgIGlmICh0aGlzLmxvZ2dlcnMubmV3ICYmIHRoaXMubG9nZ2Vycy5uZXcuY3B1RnBzKSB0aGlzLmxvZ2dlcnMubmV3LmNwdUZwcyhmcHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSkoKTtcbiAgICAgICAgdGhpcy5sb2dnZXJzLmNwdUZwcyA9ICgpID0+IHsgfTtcbiAgICAgIH1cbiAgICAgIFxuICAgIH0gZWxzZSBpZiAodGhpcy5uZXcpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5sb2dnZXJzLCB0aGlzLm5ldyk7XG4gICAgfVxuXG4gICAgLy8gaW5pdCBiZW5jaG1hcmtzXG4gICAgdGhpcy5jcHUgPSBuZXcgQ1BVKHRoaXMubG9nZ2Vycy5jcHVGcHMsIHRoaXMubG9nZ2Vycy5jcHVNZWFzdXJlKTtcbiAgICB0aGlzLmdwdSA9IChleHQpID8gbmV3IEdQVSh0aGlzLmxvZ2dlcnMuZ3B1RnBzLCB0aGlzLmxvZ2dlcnMuZ3B1TWVhc3VyZSwgZ2wsIGV4dCkgOiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEJlZ2luIGJvdHRsZW5lY2sgbWVhc3VyZW1lbnRcbiAgICovXG4gIGJlZ2luKCkge1xuICAgIGlmICh0aGlzLmdwdSkge1xuICAgICAgdGhpcy5ncHUuYmVnaW4oKTtcbiAgICAgIHRoaXMuY3B1LmJlZ2luKCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmNwdSkge1xuICAgICAgdGhpcy5jcHUuYmVnaW4oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5pbml0KCk7XG4gICAgICB0aGlzLmJlZ2luKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEVuZCBib3R0bGVuZWNrIG1lYXN1cmVtZW50XG4gICAqL1xuICBlbmQoKSB7XG4gICAgaWYgKHRoaXMuZ3B1KSB7XG4gICAgICB0aGlzLmdwdS5lbmQoKTtcbiAgICAgIHRoaXMuY3B1LmVuZCgpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5jcHUpIHtcbiAgICAgIHRoaXMuY3B1LmVuZCgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBOb3RoaW5nIGludGVyZXN0aW5nIGhlcmUsIG9ubHkgZnBzXG4gICAqL1xuICB1cGRhdGUoKSB7XG4gICAgdGhpcy5iZWdpbigpO1xuICAgIGlmICh0aGlzLmdwdSkge1xuICAgICAgdGhpcy5jcHUuZnBzTG9nZ2VyID0gKCkgPT4ge307XG4gICAgfVxuICB9XG59Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFlLE1BQU0sR0FBRyxD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
