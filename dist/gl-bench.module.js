var UISVG = "<div class=\"gl-box\">\n  <svg viewBox=\"0 0 55 60\">\n    <text x=\"27\" y=\"56\" font-size=\"0.75em\" class=\"gl-fps\">00 FPS</text>\n    <text x=\"28\" y=\"8\" font-size=\"0.55rem\" class=\"gl-mem\"></text>\n    <rect x=\"0\" y=\"14\" rx=\"4\" ry=\"4\" width=\"55\" height=\"32\" opacity=\"0.4\"/>\n    <polyline points=\"0 0 0 0\" class=\"gl-chart\"/>\n  </svg>\n  <svg viewBox=\"0 0 14 60\">\n    <line x1=\"7\" y1=\"38\" x2=\"7\" y2=\"11\" opacity=\"0.4\"/>\n    <line x1=\"7\" y1=\"38\" x2=\"7\" y2=\"11\" opacity=\"0.7\" stroke-dasharray=\"0 27\" class=\"gl-cpu\"/>\n    <path transform=\"translate(1,43) scale(.29)\" d=\"m15 0c-1.6 3e-16 -2.8 1.3-2.8 2.8v4c-2.7 0.68-4.9 2.8-5.5 5.6h-4c-1.5 0-2.8 1.2-2.8 2.8s1.2 2.8 2.8 2.8h3.8v5.7h-3.7c-1.6 0-2.8 1.3-2.8 2.8 3e-16 1.6 1.3 2.8 2.8 2.8h3.9c0.67 2.7 2.8 4.8 5.5 5.5v3.9c0 1.6 1.3 2.8 2.8 2.8 1.6 0 2.8-1.3 2.8-2.8v-3.7h5.7v3.7c0 1.6 1.3 2.8 2.8 2.8 1.6 0 2.8-1.3 2.8-2.8v-3.9c2.7-0.67 4.8-2.8 5.5-5.5h3.9c1.6 0 2.8-1.3 2.8-2.8 0-1.6-1.3-2.8-2.8-2.8h-3.7v-5.7h3.8c1.5 0 2.8-1.2 2.8-2.8s-1.2-2.8-2.8-2.8h-4c-0.65-2.7-2.8-4.9-5.5-5.6v-3.9c0-1.6-1.3-2.8-2.8-2.8-1.6 3e-16 -2.8 1.3-2.8 2.8v3.7h-5.7v-3.7c0-1.6-1.3-2.8-2.8-2.8zm2 12h7.2c2.6 0 4.7 2.1 4.7 4.7v7.2c0 2.6-2.1 4.7-4.7 4.7h-7.2c-2.6 0-4.7-2.1-4.7-4.7v-7.2c0-2.6 2.1-4.7 4.7-4.7z\"/>\n  </svg>\n  <svg viewBox=\"0 0 14 60\" class=\"gl-gpu-svg\">\n    <line x1=\"7\" y1=\"38\" x2=\"7\" y2=\"11\" opacity=\"0.4\"/>\n    <line x1=\"7\" y1=\"38\" x2=\"7\" y2=\"11\" opacity=\"0.7\" stroke-dasharray=\"0 27\" class=\"gl-gpu\"/>\n    <path transform=\"translate(0.93,43) scale(1.15)\" d=\"m0.88 0.33c-0.85-0.0024-0.86 1.3-0.0036 1.3 0.48 0.015 0.57 0.48 0.59 0.89v7.4c0 0.85 1.3 0.85 1.3 0v-1.1c1.8-0.018 3.5-0.0083 5.3-0.0083 1.1-1.6e-5 2-0.85 2-1.9v-2.7c0-1-0.88-1.9-2-1.9-1.8 8.2e-6 -3.5 5.7e-5 -5.3 5e-5 0 0-0.013-0.42-0.17-0.84-0.2-0.53-0.78-1.1-1.7-1.1zm2.5 3.2c0.37 0 0.67 0.32 0.67 0.71v2.6c0 0.39-0.3 0.71-0.67 0.71s-0.67-0.32-0.67-0.71v-2.6c0-0.39 0.3-0.71 0.67-0.71zm3.6 0c1.1 0 2 0.9 2 2s-0.9 2-2 2-2-0.9-2-2 0.9-2 2-2z\"/>\n  </svg>\n</div>";

var UICSS = "#gl-bench {\n  position:absolute;\n  left:0;\n  top:0;\n  z-index:1000;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  user-select: none;\n}\n\n#gl-bench div {\n  position: relative;\n  display: block;\n  margin: 5px;\n  padding: 0 7px 0 10px;\n  background: #6c6;\n  border-radius: 15px;\n  cursor: pointer;\n  opacity: 0.9;\n}\n\n#gl-bench svg {\n  height: 60px;\n  margin: 0 -1px;\n}\n\n#gl-bench text {\n  font-family: Helvetica,Arial,sans-serif;\n  font-weight: 700;\n  dominant-baseline: middle;\n  text-anchor: middle;\n}\n\n#gl-bench line {\n  stroke-width: 5;\n  stroke: black;\n  stroke-linecap: round;\n}\n\n#gl-bench polyline {\n  fill: none;\n  stroke: black;\n  stroke-linecap: round;\n  stroke-linejoin: round;\n  stroke-width: 3.5;\n  opacity: 0.8;\n}";

class GLBench {

  /** GLBench constructor
   * @param { WebGLRenderingContext | WebGL2RenderingContext } gl context
   * @param { Object | undefined } settings additional settings
   */
  constructor(gl, settings = {}) {
    this.css = UICSS;
    this.svg = UISVG;
    this.paramLogger = () => {};
    this.chartLogger = () => {};
    this.chartLen = 20;

    this.names = [];
    this.cpuAccums = [];
    this.gpuAccums = [];  
    this.activeAccums = [];
    this.chart = new Array(this.chartLen);
    this.now = () => (performance && performance.now) ? performance.now() : Date.now();

    Object.assign(this, settings);
    this.frameId = -1;

    // init ui and ui loggers
    if (!this.withoutUI) {
      this.dom = document.getElementById('gl-bench');
      if (!this.dom) {
        document.body.insertAdjacentHTML('afterbegin', '<div id="gl-bench"></div>');
        document.body.insertAdjacentHTML('afterbegin', '<style id="gl-bench-style">' + this.css + '</style>');
        this.dom = document.getElementById('gl-bench');
      }
      this.dom.addEventListener('click', () => {
        this.withoutGPU = !this.withoutGPU;
        setTimeout(() => {
          [].forEach.call(this.nodes['gl-gpu-svg'], node => {
            node.style.display = this.withoutGPU ? 'none' : 'inline';
          });
        }, 500);
      });

      this.paramLogger = ((logger, dom, names) => {
        const classes = ['gl-cpu', 'gl-gpu', 'gl-mem', 'gl-fps', 'gl-gpu-svg', 'gl-chart'];
        const nodes = Object.assign({}, classes);
        classes.forEach(c => nodes[c] = dom.getElementsByClassName(c));
        this.nodes = nodes;
        return (i, cpu, gpu, mem, fps, totalTime, frameId) => {
          nodes['gl-cpu'][i].style.strokeDasharray = (cpu * 0.27).toFixed(0) + ' 100';
          nodes['gl-gpu'][i].style.strokeDasharray = (gpu * 0.27).toFixed(0) + ' 100';
          nodes['gl-mem'][i].innerHTML = names[i] ? names[i] : 'mem: ' + mem.toFixed(0) + 'mb';
          nodes['gl-fps'][i].innerHTML = fps.toFixed(0) + ' FPS';
          logger(names[i], cpu, gpu, mem, fps, totalTime, frameId);
        }
      })(this.paramLogger, this.dom, this.names);

      this.chartLogger = ((logger, dom) => {
        let nodes = { 'gl-chart': dom.getElementsByClassName('gl-chart') };
        return (i, chart, circularId) => {
          let points = '';
          for (let i = 0; i < chart.length; i++) {
            let id = (circularId + i + 1) % chart.length;
            if (chart[id] != undefined) {
              points = points + ' ' + (55 * i / (chart.length - 1)).toFixed(1) + ',' + (46 - chart[id] * 24 / 60).toFixed(1);
            }
          }
          nodes['gl-chart'][i].setAttribute('points', points);
          logger(this.names[i], chart, circularId);
        }
      })(this.chartLogger, this.dom);
    }

    // attach gpu profilers
    if (gl) {
      const addProfiler = (fn, self, target) => function() {
        const t = self.now();
        fn.apply(target, arguments);
        if (!self.withoutGPU) {
          gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array(4));
          const dt = self.now() - t;
          self.activeAccums.forEach((active, i) => {
            if (active) {
              self.gpuAccums[i] += dt;
              self.cpuAccums[i] -= dt;
            }
          });
        }
      };
      ['drawArrays', 'drawElements', 'drawArraysInstanced',
        'drawBuffers', 'drawElementsInstanced', 'drawRangeElements']
        .forEach(fn => { if (gl[fn]) gl[fn] = addProfiler(gl[fn], this, gl); });

      const extProfiler = (fn, self) => function() {
        let ext = fn.apply(gl, arguments);
        ['drawElementsInstancedANGLE', 'DRAW_BUFFER0_WEBGL']
          .forEach(fn => { if (ext[fn]) ext[fn] = addProfiler(ext[fn], self, ext); });
        return ext;
      };
      gl.getExtension = extProfiler(gl.getExtension, this);
    }
  }

  /**
   * Explicit UI add
   * @param { string | undefined } name 
   */
  addUI(name) {
    if (this.names.indexOf(name) == -1) {
      this.names.push(name);
      if (this.dom) this.dom.insertAdjacentHTML('beforeend', this.svg);
      this.cpuAccums.push(0);
      this.gpuAccums.push(0);
      this.activeAccums.push(false);
    }
  }

  /**
   * Increase frameID
   * @param { number | undefined } now
   */
  nextFrame(now) {
    this.frameId++;
    const t = now ? now : this.now();

    // update params
    if (this.frameId < 2) {
      this.frameStart = this.frameId;
      this.timeStart = t;
    } else {
      const duration = t - this.timeStart;
      if (duration >= 1e3) {
        const frameCount = this.frameId - this.frameStart;
        const fps = frameCount / duration * 1e3;
        for (let i = 0; i < this.names.length; i++) {
          const cpu = this.cpuAccums[i] / duration * 100,
            gpu = this.gpuAccums[i] / duration * 100,
            mem = (performance && performance.memory) ? performance.memory.usedJSHeapSize / (1 << 20) : 0;
          this.paramLogger(i, cpu, gpu, mem, fps, duration, frameCount);
          this.cpuAccums[i] = 0;
          this.gpuAccums[i] = 0;
        }
        this.frameStart = this.frameId;
        this.timeStart = t;
      }
    }

    // update chart
    if (this.frameId < 2) {
      this.circularId = 0;
      this.prevFrame = this.frameId;
      this.zerotime = t;
    } else {
      const duration = t - this.zerotime;
      let hz = 20 * duration / 1e3;
      while (--hz > 0) {
        const frameCount = this.frameId - this.prevFrame;
        const fps = frameCount / duration * 1e3;
        this.chart[this.circularId % this.chartLen] = fps;
        for (let i = 0; i < this.names.length; i++) {
          this.chartLogger(i, this.chart, this.circularId);
        }
        this.circularId++;
        this.prevFrame = this.frameId;
        this.zerotime = t;
      }
    }
  }

  /**
   * Begin named measurement
   * @param { string | undefined } name
   */
  begin(name) {
    this.updateAccums(name);
  }

  /**
   * End named measure
   * @param { string | undefined } name
   */
  end(name) {
    this.updateAccums(name);
  }

  updateAccums(name) {
    let nameId = this.names.indexOf(name);
    if (nameId == -1) {
      nameId = this.names.length;
      this.addUI(name);
    }

    const t = this.now();
    const dt = t - this.t0;
    for (let i = 0; i < nameId + 1; i++) {
      if (this.activeAccums[i]) {
        this.cpuAccums[i] += dt;
      }
    }    this.activeAccums[nameId] = !this.activeAccums[nameId];
    this.t0 = t;
  }

}

export default GLBench;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2wtYmVuY2gubW9kdWxlLmpzIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFVJU1ZHIGZyb20gJy4vdWkuc3ZnJztcbmltcG9ydCBVSUNTUyBmcm9tICcuL3VpLmNzcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdMQmVuY2gge1xuXG4gIC8qKiBHTEJlbmNoIGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7IFdlYkdMUmVuZGVyaW5nQ29udGV4dCB8IFdlYkdMMlJlbmRlcmluZ0NvbnRleHQgfSBnbCBjb250ZXh0XG4gICAqIEBwYXJhbSB7IE9iamVjdCB8IHVuZGVmaW5lZCB9IHNldHRpbmdzIGFkZGl0aW9uYWwgc2V0dGluZ3NcbiAgICovXG4gIGNvbnN0cnVjdG9yKGdsLCBzZXR0aW5ncyA9IHt9KSB7XG4gICAgdGhpcy5jc3MgPSBVSUNTUztcbiAgICB0aGlzLnN2ZyA9IFVJU1ZHO1xuICAgIHRoaXMucGFyYW1Mb2dnZXIgPSAoKSA9PiB7fTtcbiAgICB0aGlzLmNoYXJ0TG9nZ2VyID0gKCkgPT4ge307XG4gICAgdGhpcy5jaGFydExlbiA9IDIwO1xuXG4gICAgdGhpcy5uYW1lcyA9IFtdO1xuICAgIHRoaXMuY3B1QWNjdW1zID0gW107XG4gICAgdGhpcy5ncHVBY2N1bXMgPSBbXTsgIFxuICAgIHRoaXMuYWN0aXZlQWNjdW1zID0gW107XG4gICAgdGhpcy5jaGFydCA9IG5ldyBBcnJheSh0aGlzLmNoYXJ0TGVuKTtcbiAgICB0aGlzLm5vdyA9ICgpID0+IChwZXJmb3JtYW5jZSAmJiBwZXJmb3JtYW5jZS5ub3cpID8gcGVyZm9ybWFuY2Uubm93KCkgOiBEYXRlLm5vdygpO1xuXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBzZXR0aW5ncyk7XG4gICAgdGhpcy5mcmFtZUlkID0gLTE7XG5cbiAgICAvLyBpbml0IHVpIGFuZCB1aSBsb2dnZXJzXG4gICAgaWYgKCF0aGlzLndpdGhvdXRVSSkge1xuICAgICAgdGhpcy5kb20gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2wtYmVuY2gnKTtcbiAgICAgIGlmICghdGhpcy5kb20pIHtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5pbnNlcnRBZGphY2VudEhUTUwoJ2FmdGVyYmVnaW4nLCAnPGRpdiBpZD1cImdsLWJlbmNoXCI+PC9kaXY+Jyk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuaW5zZXJ0QWRqYWNlbnRIVE1MKCdhZnRlcmJlZ2luJywgJzxzdHlsZSBpZD1cImdsLWJlbmNoLXN0eWxlXCI+JyArIHRoaXMuY3NzICsgJzwvc3R5bGU+Jyk7XG4gICAgICAgIHRoaXMuZG9tID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2dsLWJlbmNoJyk7XG4gICAgICB9XG4gICAgICB0aGlzLmRvbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgdGhpcy53aXRob3V0R1BVID0gIXRoaXMud2l0aG91dEdQVTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgW10uZm9yRWFjaC5jYWxsKHRoaXMubm9kZXNbJ2dsLWdwdS1zdmcnXSwgbm9kZSA9PiB7XG4gICAgICAgICAgICBub2RlLnN0eWxlLmRpc3BsYXkgPSB0aGlzLndpdGhvdXRHUFUgPyAnbm9uZScgOiAnaW5saW5lJztcbiAgICAgICAgICB9KVxuICAgICAgICB9LCA1MDApO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMucGFyYW1Mb2dnZXIgPSAoKGxvZ2dlciwgZG9tLCBuYW1lcykgPT4ge1xuICAgICAgICBjb25zdCBjbGFzc2VzID0gWydnbC1jcHUnLCAnZ2wtZ3B1JywgJ2dsLW1lbScsICdnbC1mcHMnLCAnZ2wtZ3B1LXN2ZycsICdnbC1jaGFydCddO1xuICAgICAgICBjb25zdCBub2RlcyA9IE9iamVjdC5hc3NpZ24oe30sIGNsYXNzZXMpO1xuICAgICAgICBjbGFzc2VzLmZvckVhY2goYyA9PiBub2Rlc1tjXSA9IGRvbS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGMpKTtcbiAgICAgICAgdGhpcy5ub2RlcyA9IG5vZGVzO1xuICAgICAgICByZXR1cm4gKGksIGNwdSwgZ3B1LCBtZW0sIGZwcywgdG90YWxUaW1lLCBmcmFtZUlkKSA9PiB7XG4gICAgICAgICAgbm9kZXNbJ2dsLWNwdSddW2ldLnN0eWxlLnN0cm9rZURhc2hhcnJheSA9IChjcHUgKiAwLjI3KS50b0ZpeGVkKDApICsgJyAxMDAnO1xuICAgICAgICAgIG5vZGVzWydnbC1ncHUnXVtpXS5zdHlsZS5zdHJva2VEYXNoYXJyYXkgPSAoZ3B1ICogMC4yNykudG9GaXhlZCgwKSArICcgMTAwJztcbiAgICAgICAgICBub2Rlc1snZ2wtbWVtJ11baV0uaW5uZXJIVE1MID0gbmFtZXNbaV0gPyBuYW1lc1tpXSA6ICdtZW06ICcgKyBtZW0udG9GaXhlZCgwKSArICdtYic7XG4gICAgICAgICAgbm9kZXNbJ2dsLWZwcyddW2ldLmlubmVySFRNTCA9IGZwcy50b0ZpeGVkKDApICsgJyBGUFMnO1xuICAgICAgICAgIGxvZ2dlcihuYW1lc1tpXSwgY3B1LCBncHUsIG1lbSwgZnBzLCB0b3RhbFRpbWUsIGZyYW1lSWQpO1xuICAgICAgICB9XG4gICAgICB9KSh0aGlzLnBhcmFtTG9nZ2VyLCB0aGlzLmRvbSwgdGhpcy5uYW1lcyk7XG5cbiAgICAgIHRoaXMuY2hhcnRMb2dnZXIgPSAoKGxvZ2dlciwgZG9tKSA9PiB7XG4gICAgICAgIGxldCBub2RlcyA9IHsgJ2dsLWNoYXJ0JzogZG9tLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2dsLWNoYXJ0JykgfTtcbiAgICAgICAgcmV0dXJuIChpLCBjaGFydCwgY2lyY3VsYXJJZCkgPT4ge1xuICAgICAgICAgIGxldCBwb2ludHMgPSAnJztcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoYXJ0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgaWQgPSAoY2lyY3VsYXJJZCArIGkgKyAxKSAlIGNoYXJ0Lmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChjaGFydFtpZF0gIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIHBvaW50cyA9IHBvaW50cyArICcgJyArICg1NSAqIGkgLyAoY2hhcnQubGVuZ3RoIC0gMSkpLnRvRml4ZWQoMSkgKyAnLCcgKyAoNDYgLSBjaGFydFtpZF0gKiAyNCAvIDYwKS50b0ZpeGVkKDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBub2Rlc1snZ2wtY2hhcnQnXVtpXS5zZXRBdHRyaWJ1dGUoJ3BvaW50cycsIHBvaW50cyk7XG4gICAgICAgICAgbG9nZ2VyKHRoaXMubmFtZXNbaV0sIGNoYXJ0LCBjaXJjdWxhcklkKTtcbiAgICAgICAgfVxuICAgICAgfSkodGhpcy5jaGFydExvZ2dlciwgdGhpcy5kb20pO1xuICAgIH1cblxuICAgIC8vIGF0dGFjaCBncHUgcHJvZmlsZXJzXG4gICAgaWYgKGdsKSB7XG4gICAgICBjb25zdCBhZGRQcm9maWxlciA9IChmbiwgc2VsZiwgdGFyZ2V0KSA9PiBmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc3QgdCA9IHNlbGYubm93KCk7XG4gICAgICAgIGZuLmFwcGx5KHRhcmdldCwgYXJndW1lbnRzKTtcbiAgICAgICAgaWYgKCFzZWxmLndpdGhvdXRHUFUpIHtcbiAgICAgICAgICBnbC5yZWFkUGl4ZWxzKDAsIDAsIDEsIDEsIGdsLlJHQkEsIGdsLlVOU0lHTkVEX0JZVEUsIG5ldyBVaW50OEFycmF5KDQpKTtcbiAgICAgICAgICBjb25zdCBkdCA9IHNlbGYubm93KCkgLSB0O1xuICAgICAgICAgIHNlbGYuYWN0aXZlQWNjdW1zLmZvckVhY2goKGFjdGl2ZSwgaSkgPT4ge1xuICAgICAgICAgICAgaWYgKGFjdGl2ZSkge1xuICAgICAgICAgICAgICBzZWxmLmdwdUFjY3Vtc1tpXSArPSBkdDtcbiAgICAgICAgICAgICAgc2VsZi5jcHVBY2N1bXNbaV0gLT0gZHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBbJ2RyYXdBcnJheXMnLCAnZHJhd0VsZW1lbnRzJywgJ2RyYXdBcnJheXNJbnN0YW5jZWQnLFxuICAgICAgICAnZHJhd0J1ZmZlcnMnLCAnZHJhd0VsZW1lbnRzSW5zdGFuY2VkJywgJ2RyYXdSYW5nZUVsZW1lbnRzJ11cbiAgICAgICAgLmZvckVhY2goZm4gPT4geyBpZiAoZ2xbZm5dKSBnbFtmbl0gPSBhZGRQcm9maWxlcihnbFtmbl0sIHRoaXMsIGdsKSB9KTtcblxuICAgICAgY29uc3QgZXh0UHJvZmlsZXIgPSAoZm4sIHNlbGYpID0+IGZ1bmN0aW9uKCkge1xuICAgICAgICBsZXQgZXh0ID0gZm4uYXBwbHkoZ2wsIGFyZ3VtZW50cyk7XG4gICAgICAgIFsnZHJhd0VsZW1lbnRzSW5zdGFuY2VkQU5HTEUnLCAnRFJBV19CVUZGRVIwX1dFQkdMJ11cbiAgICAgICAgICAuZm9yRWFjaChmbiA9PiB7IGlmIChleHRbZm5dKSBleHRbZm5dID0gYWRkUHJvZmlsZXIoZXh0W2ZuXSwgc2VsZiwgZXh0KSB9KTtcbiAgICAgICAgcmV0dXJuIGV4dDtcbiAgICAgIH07XG4gICAgICBnbC5nZXRFeHRlbnNpb24gPSBleHRQcm9maWxlcihnbC5nZXRFeHRlbnNpb24sIHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBFeHBsaWNpdCBVSSBhZGRcbiAgICogQHBhcmFtIHsgc3RyaW5nIHwgdW5kZWZpbmVkIH0gbmFtZSBcbiAgICovXG4gIGFkZFVJKG5hbWUpIHtcbiAgICBpZiAodGhpcy5uYW1lcy5pbmRleE9mKG5hbWUpID09IC0xKSB7XG4gICAgICB0aGlzLm5hbWVzLnB1c2gobmFtZSk7XG4gICAgICBpZiAodGhpcy5kb20pIHRoaXMuZG9tLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgdGhpcy5zdmcpO1xuICAgICAgdGhpcy5jcHVBY2N1bXMucHVzaCgwKTtcbiAgICAgIHRoaXMuZ3B1QWNjdW1zLnB1c2goMCk7XG4gICAgICB0aGlzLmFjdGl2ZUFjY3Vtcy5wdXNoKGZhbHNlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSW5jcmVhc2UgZnJhbWVJRFxuICAgKiBAcGFyYW0geyBudW1iZXIgfCB1bmRlZmluZWQgfSBub3dcbiAgICovXG4gIG5leHRGcmFtZShub3cpIHtcbiAgICB0aGlzLmZyYW1lSWQrKztcbiAgICBjb25zdCB0ID0gbm93ID8gbm93IDogdGhpcy5ub3coKTtcblxuICAgIC8vIHVwZGF0ZSBwYXJhbXNcbiAgICBpZiAodGhpcy5mcmFtZUlkIDwgMikge1xuICAgICAgdGhpcy5mcmFtZVN0YXJ0ID0gdGhpcy5mcmFtZUlkO1xuICAgICAgdGhpcy50aW1lU3RhcnQgPSB0O1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBkdXJhdGlvbiA9IHQgLSB0aGlzLnRpbWVTdGFydDtcbiAgICAgIGlmIChkdXJhdGlvbiA+PSAxZTMpIHtcbiAgICAgICAgY29uc3QgZnJhbWVDb3VudCA9IHRoaXMuZnJhbWVJZCAtIHRoaXMuZnJhbWVTdGFydDtcbiAgICAgICAgY29uc3QgZnBzID0gZnJhbWVDb3VudCAvIGR1cmF0aW9uICogMWUzO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBjcHUgPSB0aGlzLmNwdUFjY3Vtc1tpXSAvIGR1cmF0aW9uICogMTAwLFxuICAgICAgICAgICAgZ3B1ID0gdGhpcy5ncHVBY2N1bXNbaV0gLyBkdXJhdGlvbiAqIDEwMCxcbiAgICAgICAgICAgIG1lbSA9IChwZXJmb3JtYW5jZSAmJiBwZXJmb3JtYW5jZS5tZW1vcnkpID8gcGVyZm9ybWFuY2UubWVtb3J5LnVzZWRKU0hlYXBTaXplIC8gKDEgPDwgMjApIDogMDtcbiAgICAgICAgICB0aGlzLnBhcmFtTG9nZ2VyKGksIGNwdSwgZ3B1LCBtZW0sIGZwcywgZHVyYXRpb24sIGZyYW1lQ291bnQpO1xuICAgICAgICAgIHRoaXMuY3B1QWNjdW1zW2ldID0gMDtcbiAgICAgICAgICB0aGlzLmdwdUFjY3Vtc1tpXSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5mcmFtZVN0YXJ0ID0gdGhpcy5mcmFtZUlkO1xuICAgICAgICB0aGlzLnRpbWVTdGFydCA9IHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gdXBkYXRlIGNoYXJ0XG4gICAgaWYgKHRoaXMuZnJhbWVJZCA8IDIpIHtcbiAgICAgIHRoaXMuY2lyY3VsYXJJZCA9IDA7XG4gICAgICB0aGlzLnByZXZGcmFtZSA9IHRoaXMuZnJhbWVJZDtcbiAgICAgIHRoaXMuemVyb3RpbWUgPSB0O1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBkdXJhdGlvbiA9IHQgLSB0aGlzLnplcm90aW1lO1xuICAgICAgbGV0IGh6ID0gMjAgKiBkdXJhdGlvbiAvIDFlMztcbiAgICAgIHdoaWxlICgtLWh6ID4gMCkge1xuICAgICAgICBjb25zdCBmcmFtZUNvdW50ID0gdGhpcy5mcmFtZUlkIC0gdGhpcy5wcmV2RnJhbWU7XG4gICAgICAgIGNvbnN0IGZwcyA9IGZyYW1lQ291bnQgLyBkdXJhdGlvbiAqIDFlMztcbiAgICAgICAgdGhpcy5jaGFydFt0aGlzLmNpcmN1bGFySWQgJSB0aGlzLmNoYXJ0TGVuXSA9IGZwcztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdGhpcy5jaGFydExvZ2dlcihpLCB0aGlzLmNoYXJ0LCB0aGlzLmNpcmN1bGFySWQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2lyY3VsYXJJZCsrO1xuICAgICAgICB0aGlzLnByZXZGcmFtZSA9IHRoaXMuZnJhbWVJZDtcbiAgICAgICAgdGhpcy56ZXJvdGltZSA9IHQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEJlZ2luIG5hbWVkIG1lYXN1cmVtZW50XG4gICAqIEBwYXJhbSB7IHN0cmluZyB8IHVuZGVmaW5lZCB9IG5hbWVcbiAgICovXG4gIGJlZ2luKG5hbWUpIHtcbiAgICB0aGlzLnVwZGF0ZUFjY3VtcyhuYW1lKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFbmQgbmFtZWQgbWVhc3VyZVxuICAgKiBAcGFyYW0geyBzdHJpbmcgfCB1bmRlZmluZWQgfSBuYW1lXG4gICAqL1xuICBlbmQobmFtZSkge1xuICAgIHRoaXMudXBkYXRlQWNjdW1zKG5hbWUpO1xuICB9XG5cbiAgdXBkYXRlQWNjdW1zKG5hbWUpIHtcbiAgICBsZXQgbmFtZUlkID0gdGhpcy5uYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgIGlmIChuYW1lSWQgPT0gLTEpIHtcbiAgICAgIG5hbWVJZCA9IHRoaXMubmFtZXMubGVuZ3RoO1xuICAgICAgdGhpcy5hZGRVSShuYW1lKTtcbiAgICB9XG5cbiAgICBjb25zdCB0ID0gdGhpcy5ub3coKTtcbiAgICBjb25zdCBkdCA9IHQgLSB0aGlzLnQwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmFtZUlkICsgMTsgaSsrKSB7XG4gICAgICBpZiAodGhpcy5hY3RpdmVBY2N1bXNbaV0pIHtcbiAgICAgICAgdGhpcy5jcHVBY2N1bXNbaV0gKz0gZHQ7XG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLmFjdGl2ZUFjY3Vtc1tuYW1lSWRdID0gIXRoaXMuYWN0aXZlQWNjdW1zW25hbWVJZF07XG4gICAgdGhpcy50MCA9IHQ7XG4gIH1cblxufSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBR2UsTUFBTSxPQUFPLENBQUM7Ozs7OztFQU0zQixXQUFXLENBQUMsRUFBRSxFQUFFLFFBQVEsR0FBRyxFQUFFLEVBQUU7SUFDN0IsSUFBSSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUM7SUFDakIsSUFBSSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUM7SUFDakIsSUFBSSxDQUFDLFdBQVcsR0FBRyxNQUFNLEVBQUUsQ0FBQztJQUM1QixJQUFJLENBQUMsV0FBVyxHQUFHLE1BQU0sRUFBRSxDQUFDO0lBQzVCLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDOztJQUVu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
