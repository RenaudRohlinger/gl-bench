var UIFull = "<svg viewBox=\"0 0 100 70\" class=\"gl-bench\">\n\n<rect x=\"0\" y=\"0\" width=\"100\" height=\"70\" rx=\"26.5\" ry=\"26.5\" class=\"gl-box\"/>\n\n<text x=\"26.5\" y=\"22\" class=\"gl-text gl-cpu\">00%</text>\n<text x=\"26.5\" y=\"34\" class=\"gl-text\">CPU</text>\n<circle cx=\"26.5\" cy=\"26.5\" r=\"20\" class=\"gl-circle\"/>\n<path d=\"M21.0 37 a 15.9155 -15.9155 0 0 1 0 -31.831 a 15.9155 15.9155 0 0 1 0 31.831\"\n  class=\"gl-arc gl-cpu-arc\"/>\n\n<circle cx=\"73.5\" cy=\"26.5\" r=\"20\" class=\"gl-circle\"/>\n<text x=\"73.5\" y=\"22\" class=\"gl-text gl-gpu\">00%</text>\n<text x=\"73.5\" y=\"34\" class=\"gl-text\">GPU</text>\n<path d=\"M58.5 37 a 15.9155 -15.9155 0 0 1 0 -31.831 a 15.9155 15.9155 0 0 1 0 31.831\"\n  class=\"gl-arc gl-gpu-arc\"/>\n\n<text x=\"50\" y=\"59\" font-size=\".8em\" class=\"gl-text gl-fps\">00 FPS</text>\n<circle cx=\"18\" cy=\"58\" r=\"3\" style=\"opacity:0.55\"/>\n<circle cx=\"82\" cy=\"58\" r=\"3\" style=\"opacity:0.55\"/>\n\n</svg>";

var UIStyle = ".gl-bench {\n  position: relative;\n  display: block;\n  margin: 5px;\n  width: 100px;\n  cursor: pointer;\n}\n\n.gl-box {\n  fill: hsla(120, 50%, 60%, 0.65);\n}\n\n.gl-text {\n  font-family: sans-serif;\n  font-weight: 700;\n  font-size: 0.7em;\n  text-anchor: middle;\n  dominant-baseline: middle;\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  opacity: 0.7;\n}\n\n.gl-arc {\n  fill: none;  \n  stroke: black;\n  stroke-width: 2.6;\n  stroke-dasharray: 0, 100;\n  opacity: 0.5;  \n  transform: scale(1.25663);\n}\n\n.gl-circle {\n  fill: none;\n  stroke-width: 3.5;\n  stroke: black;\n  opacity: 0.4;\n}";

class GLBench {

  /**
   * @param { WebGLRenderingContext | WebGL2RenderingContext } gl 
   * @param { Object | undefined } settings
   */
  constructor(gl, settings = {}) {
    this.names = [];
    Object.assign(this, settings);

    // add gpu profilers
    const addProfiler = (fn, self) => function() {
      const begin = self.now();
      fn.apply(gl, arguments);
      const temp = new Uint8Array(4);
      gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, temp);
      const dt = self.now() - begin;
      const binaryFlags = self.measureMode.toString(2);
      for (let i = 0; i < binaryFlags.length; i++) {
        if (binaryFlags[i] == '1') {
          const index = binaryFlags.length - i - 1;
          self.cpuAccums[index] -= dt;
          self.gpuAccums[index] += dt;
        }
      }
    };
    if (gl instanceof WebGLRenderingContext || gl instanceof WebGL2RenderingContext) {
      ['drawArrays', 'drawElements', 'drawArraysInstanced',
        'drawBuffers', 'drawElementsInstanced', 'drawRangeElements']
        .forEach(fn => { if (gl[fn]) gl[fn] = addProfiler(gl[fn], this); });
    }

    // init ui and attach loggers
    if (!this.withoutUI) {
      this.dom = document.getElementById('gl-bench-dom');
      if (!this.dom) {
        document.body.insertAdjacentHTML('afterbegin',
          '<div id="gl-bench-dom" style="position:absolute;left:0;top:0;z-index:1000"></div>');
        this.dom = document.getElementById('gl-bench-dom');
        let styleNode = document.createElement('style');
        styleNode.innerHTML = UIStyle;
        this.dom.appendChild(styleNode);
      }
      this.dom.addEventListener('click', () => { this.showMS = !this.showMS; });

      function addLogger(elm, elmChanger, pct, pctChanger, extraLogger, dom, names) {
        this.elm = dom.getElementsByClassName(elm);
        this.pct = dom.getElementsByClassName(pct);
        this.names = names;
        return (x, y, i) => {
          this.elm[i].innerHTML = elmChanger(x, y);
          this.pct[i].style[pct == 'gl-box' ? 'fill' : 'strokeDasharray'] = pctChanger(x);
          if (extraLogger) extraLogger(x, y, this.names[i]);
        }
      }
      this.fpsLogger = addLogger.bind({}) (
        'gl-fps', (fps, ms) => !this.showMS ? fps.toFixed(0) + ' FPS' : ms.toFixed(2) + ' MS',
        'gl-box', fps => 'hsla(' + Math.min(120, Math.max(0, 2.182*(fps-5))) + ',50%,60%,0.65)',
        this.fpsLogger, this.dom, this.names
      );
      this.cpuLogger = addLogger.bind({}) (
        'gl-cpu', (cpu, ms) => !this.showMS ? cpu.toFixed(0) + '%' : ms.toFixed(2),
        'gl-cpu-arc', cpu => cpu.toFixed(0) + ', 100',
        this.cpuLogger, this.dom, this.names
      );
      this.gpuLogger = addLogger.bind({}) (
        'gl-gpu', (gpu, ms) => !this.showMS ? gpu.toFixed(0) + '%' : ms.toFixed(2),
        'gl-gpu-arc', gpu => gpu.toFixed(0) + ', 100',
        this.gpuLogger, this.dom, this.names
      );
    }
    if (!this.cpuLogger) this.cpuLogger = () => {};
    if (!this.gpuLogger) this.gpuLogger = () => {};
    if (!this.fpsLogger) this.fpsLogger = () => {};

    this.now = () => (performance && performance.now) ? performance.now() : Date.now();
    this.frameId = 0;
    this.cpuAccums = [];
    this.gpuAccums = [];
    this.measureMode = 0;
  }

  /**
   * Add UI in dom
   * @param { string } name 
   */
  addUI(name) {
    this.names.push(name);
    if (this.dom) this.dom.insertAdjacentHTML('beforeend', UIFull);
  }

  /**
   * Begin named measure
   * @param { string | undefined } name
   */
  begin(name) {
    let nameId = this.names.indexOf(name);
    if (this.names.indexOf(name) == -1) {
      nameId = this.names.length;
      this.addUI(name);
    }

    if (nameId === 0) this.frameId++;
    if (this.cpuAccums.length <= nameId) this.cpuAccums.push(0);
    if (this.gpuAccums.length <= nameId) this.gpuAccums.push(0);
    
    this.update();
    this.measureMode += 1 << nameId;
  }

  /**
   * End named measure
   * @param { string | undefined } name
   */
  end(name) {
    const nameId = this.names.indexOf(name);

    this.update();
    this.measureMode -= 1 << nameId;
  }

  /**
   * Accumulators updater
   */
  update() {
    const now = this.now();
    if (typeof this.zerotime == 'undefined') {
      this.zerotime = now;
    } else {
      const dt = now - this.prevNow;
      const binaryFlags = this.measureMode.toString(2);
      for (let i = 0; i < binaryFlags.length; i++) {
        if (binaryFlags[i] == '1') {
          const index = binaryFlags.length - i - 1;
          this.cpuAccums[index] += dt;
        }
      }

      const totalAccum = now - this.zerotime;
      let seconds = totalAccum / 1e3;
      if (seconds >= 1) {
        const fps = this.frameId / seconds;
        const frametime = totalAccum / this.frameId;
        for (let i = 0; i < this.cpuAccums.length; i++) {
          this.cpuLogger(this.cpuAccums[i] / totalAccum * 100, this.cpuAccums[i] / this.frameId, i);
          this.gpuLogger(this.gpuAccums[i] / totalAccum * 100, this.gpuAccums[i] / this.frameId, i);
          this.fpsLogger(fps, frametime, i);
        }
        let j = this.cpuAccums.length;
        while (j--) {
          this.cpuAccums[j] = 0;
          this.gpuAccums[j] = 0;
        }
        this.frameId = 0;
        this.zerotime = now;
      }
    }
    this.prevNow = now;
  }
}

export default GLBench;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2wtYmVuY2gubW9kdWxlLmpzIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFVJRnVsbCBmcm9tICcuL3VpL3VpLWZ1bGwuc3ZnJztcbmltcG9ydCBVSVN0eWxlIGZyb20gJy4vdWkvdWkuY3NzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR0xCZW5jaCB7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IFdlYkdMUmVuZGVyaW5nQ29udGV4dCB8IFdlYkdMMlJlbmRlcmluZ0NvbnRleHQgfSBnbCBcbiAgICogQHBhcmFtIHsgT2JqZWN0IHwgdW5kZWZpbmVkIH0gc2V0dGluZ3NcbiAgICovXG4gIGNvbnN0cnVjdG9yKGdsLCBzZXR0aW5ncyA9IHt9KSB7XG4gICAgdGhpcy5uYW1lcyA9IFtdO1xuICAgIE9iamVjdC5hc3NpZ24odGhpcywgc2V0dGluZ3MpO1xuXG4gICAgLy8gYWRkIGdwdSBwcm9maWxlcnNcbiAgICBjb25zdCBhZGRQcm9maWxlciA9IChmbiwgc2VsZikgPT4gZnVuY3Rpb24oKSB7XG4gICAgICBjb25zdCBiZWdpbiA9IHNlbGYubm93KCk7XG4gICAgICBmbi5hcHBseShnbCwgYXJndW1lbnRzKTtcbiAgICAgIGNvbnN0IHRlbXAgPSBuZXcgVWludDhBcnJheSg0KTtcbiAgICAgIGdsLnJlYWRQaXhlbHMoMCwgMCwgMSwgMSwgZ2wuUkdCQSwgZ2wuVU5TSUdORURfQllURSwgdGVtcCk7XG4gICAgICBjb25zdCBkdCA9IHNlbGYubm93KCkgLSBiZWdpbjtcbiAgICAgIGNvbnN0IGJpbmFyeUZsYWdzID0gc2VsZi5tZWFzdXJlTW9kZS50b1N0cmluZygyKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmluYXJ5RmxhZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGJpbmFyeUZsYWdzW2ldID09ICcxJykge1xuICAgICAgICAgIGNvbnN0IGluZGV4ID0gYmluYXJ5RmxhZ3MubGVuZ3RoIC0gaSAtIDE7XG4gICAgICAgICAgc2VsZi5jcHVBY2N1bXNbaW5kZXhdIC09IGR0O1xuICAgICAgICAgIHNlbGYuZ3B1QWNjdW1zW2luZGV4XSArPSBkdDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZ2wgaW5zdGFuY2VvZiBXZWJHTFJlbmRlcmluZ0NvbnRleHQgfHwgZ2wgaW5zdGFuY2VvZiBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KSB7XG4gICAgICBbJ2RyYXdBcnJheXMnLCAnZHJhd0VsZW1lbnRzJywgJ2RyYXdBcnJheXNJbnN0YW5jZWQnLFxuICAgICAgICAnZHJhd0J1ZmZlcnMnLCAnZHJhd0VsZW1lbnRzSW5zdGFuY2VkJywgJ2RyYXdSYW5nZUVsZW1lbnRzJ11cbiAgICAgICAgLmZvckVhY2goZm4gPT4geyBpZiAoZ2xbZm5dKSBnbFtmbl0gPSBhZGRQcm9maWxlcihnbFtmbl0sIHRoaXMpIH0pO1xuICAgIH1cblxuICAgIC8vIGluaXQgdWkgYW5kIGF0dGFjaCBsb2dnZXJzXG4gICAgaWYgKCF0aGlzLndpdGhvdXRVSSkge1xuICAgICAgdGhpcy5kb20gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2wtYmVuY2gtZG9tJyk7XG4gICAgICBpZiAoIXRoaXMuZG9tKSB7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuaW5zZXJ0QWRqYWNlbnRIVE1MKCdhZnRlcmJlZ2luJyxcbiAgICAgICAgICAnPGRpdiBpZD1cImdsLWJlbmNoLWRvbVwiIHN0eWxlPVwicG9zaXRpb246YWJzb2x1dGU7bGVmdDowO3RvcDowO3otaW5kZXg6MTAwMFwiPjwvZGl2PicpO1xuICAgICAgICB0aGlzLmRvbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnbC1iZW5jaC1kb20nKTtcbiAgICAgICAgbGV0IHN0eWxlTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgICAgIHN0eWxlTm9kZS5pbm5lckhUTUwgPSBVSVN0eWxlO1xuICAgICAgICB0aGlzLmRvbS5hcHBlbmRDaGlsZChzdHlsZU5vZGUpO1xuICAgICAgfVxuICAgICAgdGhpcy5kb20uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7IHRoaXMuc2hvd01TID0gIXRoaXMuc2hvd01TOyB9KTtcblxuICAgICAgZnVuY3Rpb24gYWRkTG9nZ2VyKGVsbSwgZWxtQ2hhbmdlciwgcGN0LCBwY3RDaGFuZ2VyLCBleHRyYUxvZ2dlciwgZG9tLCBuYW1lcykge1xuICAgICAgICB0aGlzLmVsbSA9IGRvbS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGVsbSk7XG4gICAgICAgIHRoaXMucGN0ID0gZG9tLmdldEVsZW1lbnRzQnlDbGFzc05hbWUocGN0KTtcbiAgICAgICAgdGhpcy5uYW1lcyA9IG5hbWVzO1xuICAgICAgICByZXR1cm4gKHgsIHksIGkpID0+IHtcbiAgICAgICAgICB0aGlzLmVsbVtpXS5pbm5lckhUTUwgPSBlbG1DaGFuZ2VyKHgsIHkpO1xuICAgICAgICAgIHRoaXMucGN0W2ldLnN0eWxlW3BjdCA9PSAnZ2wtYm94JyA/ICdmaWxsJyA6ICdzdHJva2VEYXNoYXJyYXknXSA9IHBjdENoYW5nZXIoeCk7XG4gICAgICAgICAgaWYgKGV4dHJhTG9nZ2VyKSBleHRyYUxvZ2dlcih4LCB5LCB0aGlzLm5hbWVzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5mcHNMb2dnZXIgPSBhZGRMb2dnZXIuYmluZCh7fSkgKFxuICAgICAgICAnZ2wtZnBzJywgKGZwcywgbXMpID0+ICF0aGlzLnNob3dNUyA/IGZwcy50b0ZpeGVkKDApICsgJyBGUFMnIDogbXMudG9GaXhlZCgyKSArICcgTVMnLFxuICAgICAgICAnZ2wtYm94JywgZnBzID0+ICdoc2xhKCcgKyBNYXRoLm1pbigxMjAsIE1hdGgubWF4KDAsIDIuMTgyKihmcHMtNSkpKSArICcsNTAlLDYwJSwwLjY1KScsXG4gICAgICAgIHRoaXMuZnBzTG9nZ2VyLCB0aGlzLmRvbSwgdGhpcy5uYW1lc1xuICAgICAgKTtcbiAgICAgIHRoaXMuY3B1TG9nZ2VyID0gYWRkTG9nZ2VyLmJpbmQoe30pIChcbiAgICAgICAgJ2dsLWNwdScsIChjcHUsIG1zKSA9PiAhdGhpcy5zaG93TVMgPyBjcHUudG9GaXhlZCgwKSArICclJyA6IG1zLnRvRml4ZWQoMiksXG4gICAgICAgICdnbC1jcHUtYXJjJywgY3B1ID0+IGNwdS50b0ZpeGVkKDApICsgJywgMTAwJyxcbiAgICAgICAgdGhpcy5jcHVMb2dnZXIsIHRoaXMuZG9tLCB0aGlzLm5hbWVzXG4gICAgICApO1xuICAgICAgdGhpcy5ncHVMb2dnZXIgPSBhZGRMb2dnZXIuYmluZCh7fSkgKFxuICAgICAgICAnZ2wtZ3B1JywgKGdwdSwgbXMpID0+ICF0aGlzLnNob3dNUyA/IGdwdS50b0ZpeGVkKDApICsgJyUnIDogbXMudG9GaXhlZCgyKSxcbiAgICAgICAgJ2dsLWdwdS1hcmMnLCBncHUgPT4gZ3B1LnRvRml4ZWQoMCkgKyAnLCAxMDAnLFxuICAgICAgICB0aGlzLmdwdUxvZ2dlciwgdGhpcy5kb20sIHRoaXMubmFtZXNcbiAgICAgICk7XG4gICAgfVxuICAgIGlmICghdGhpcy5jcHVMb2dnZXIpIHRoaXMuY3B1TG9nZ2VyID0gKCkgPT4ge307XG4gICAgaWYgKCF0aGlzLmdwdUxvZ2dlcikgdGhpcy5ncHVMb2dnZXIgPSAoKSA9PiB7fTtcbiAgICBpZiAoIXRoaXMuZnBzTG9nZ2VyKSB0aGlzLmZwc0xvZ2dlciA9ICgpID0+IHt9O1xuXG4gICAgdGhpcy5ub3cgPSAoKSA9PiAocGVyZm9ybWFuY2UgJiYgcGVyZm9ybWFuY2Uubm93KSA/IHBlcmZvcm1hbmNlLm5vdygpIDogRGF0ZS5ub3coKTtcbiAgICB0aGlzLmZyYW1lSWQgPSAwO1xuICAgIHRoaXMuY3B1QWNjdW1zID0gW107XG4gICAgdGhpcy5ncHVBY2N1bXMgPSBbXTtcbiAgICB0aGlzLm1lYXN1cmVNb2RlID0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgVUkgaW4gZG9tXG4gICAqIEBwYXJhbSB7IHN0cmluZyB9IG5hbWUgXG4gICAqL1xuICBhZGRVSShuYW1lKSB7XG4gICAgdGhpcy5uYW1lcy5wdXNoKG5hbWUpO1xuICAgIGlmICh0aGlzLmRvbSkgdGhpcy5kb20uaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBVSUZ1bGwpO1xuICB9XG5cbiAgLyoqXG4gICAqIEJlZ2luIG5hbWVkIG1lYXN1cmVcbiAgICogQHBhcmFtIHsgc3RyaW5nIHwgdW5kZWZpbmVkIH0gbmFtZVxuICAgKi9cbiAgYmVnaW4obmFtZSkge1xuICAgIGxldCBuYW1lSWQgPSB0aGlzLm5hbWVzLmluZGV4T2YobmFtZSk7XG4gICAgaWYgKHRoaXMubmFtZXMuaW5kZXhPZihuYW1lKSA9PSAtMSkge1xuICAgICAgbmFtZUlkID0gdGhpcy5uYW1lcy5sZW5ndGg7XG4gICAgICB0aGlzLmFkZFVJKG5hbWUpO1xuICAgIH1cblxuICAgIGlmIChuYW1lSWQgPT09IDApIHRoaXMuZnJhbWVJZCsrO1xuICAgIGlmICh0aGlzLmNwdUFjY3Vtcy5sZW5ndGggPD0gbmFtZUlkKSB0aGlzLmNwdUFjY3Vtcy5wdXNoKDApO1xuICAgIGlmICh0aGlzLmdwdUFjY3Vtcy5sZW5ndGggPD0gbmFtZUlkKSB0aGlzLmdwdUFjY3Vtcy5wdXNoKDApO1xuICAgIFxuICAgIHRoaXMudXBkYXRlKCk7XG4gICAgdGhpcy5tZWFzdXJlTW9kZSArPSAxIDw8IG5hbWVJZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBFbmQgbmFtZWQgbWVhc3VyZVxuICAgKiBAcGFyYW0geyBzdHJpbmcgfCB1bmRlZmluZWQgfSBuYW1lXG4gICAqL1xuICBlbmQobmFtZSkge1xuICAgIGNvbnN0IG5hbWVJZCA9IHRoaXMubmFtZXMuaW5kZXhPZihuYW1lKTtcblxuICAgIHRoaXMudXBkYXRlKCk7XG4gICAgdGhpcy5tZWFzdXJlTW9kZSAtPSAxIDw8IG5hbWVJZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBY2N1bXVsYXRvcnMgdXBkYXRlclxuICAgKi9cbiAgdXBkYXRlKCkge1xuICAgIGNvbnN0IG5vdyA9IHRoaXMubm93KCk7XG4gICAgaWYgKHR5cGVvZiB0aGlzLnplcm90aW1lID09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLnplcm90aW1lID0gbm93O1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBkdCA9IG5vdyAtIHRoaXMucHJldk5vdztcbiAgICAgIGNvbnN0IGJpbmFyeUZsYWdzID0gdGhpcy5tZWFzdXJlTW9kZS50b1N0cmluZygyKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmluYXJ5RmxhZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGJpbmFyeUZsYWdzW2ldID09ICcxJykge1xuICAgICAgICAgIGNvbnN0IGluZGV4ID0gYmluYXJ5RmxhZ3MubGVuZ3RoIC0gaSAtIDE7XG4gICAgICAgICAgdGhpcy5jcHVBY2N1bXNbaW5kZXhdICs9IGR0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHRvdGFsQWNjdW0gPSBub3cgLSB0aGlzLnplcm90aW1lO1xuICAgICAgbGV0IHNlY29uZHMgPSB0b3RhbEFjY3VtIC8gMWUzO1xuICAgICAgaWYgKHNlY29uZHMgPj0gMSkge1xuICAgICAgICBjb25zdCBmcHMgPSB0aGlzLmZyYW1lSWQgLyBzZWNvbmRzO1xuICAgICAgICBjb25zdCBmcmFtZXRpbWUgPSB0b3RhbEFjY3VtIC8gdGhpcy5mcmFtZUlkO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY3B1QWNjdW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdGhpcy5jcHVMb2dnZXIodGhpcy5jcHVBY2N1bXNbaV0gLyB0b3RhbEFjY3VtICogMTAwLCB0aGlzLmNwdUFjY3Vtc1tpXSAvIHRoaXMuZnJhbWVJZCwgaSk7XG4gICAgICAgICAgdGhpcy5ncHVMb2dnZXIodGhpcy5ncHVBY2N1bXNbaV0gLyB0b3RhbEFjY3VtICogMTAwLCB0aGlzLmdwdUFjY3Vtc1tpXSAvIHRoaXMuZnJhbWVJZCwgaSk7XG4gICAgICAgICAgdGhpcy5mcHNMb2dnZXIoZnBzLCBmcmFtZXRpbWUsIGkpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBqID0gdGhpcy5jcHVBY2N1bXMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoai0tKSB7XG4gICAgICAgICAgdGhpcy5jcHVBY2N1bXNbal0gPSAwO1xuICAgICAgICAgIHRoaXMuZ3B1QWNjdW1zW2pdID0gMDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZyYW1lSWQgPSAwO1xuICAgICAgICB0aGlzLnplcm90aW1lID0gbm93O1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnByZXZOb3cgPSBub3c7XG4gIH1cbn0iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUdlLE1BQU0sT0FBTyxDQUFDOzs7Ozs7RUFNM0IsV0FBVyxDQUFDLEVBQUUsRUFBRSxRQUFRLEdBQUcsRUFBRSxFQUFFO0lBQzdCLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO0lBQ2hCLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDOzs7SUFHOUIsTUFBTSxXQUFXLEdBQUcsQ0FBQyxFQUFFLEVBQUUsSUFBSSxLQUFLLFdBQVc7TUFDM0MsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO01BQ3pCLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLFNBQVMsQ0FBQyxDQUFDO01BQ3hCLE1BQU0sSUFBSSxHQUFHLElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO01BQy9CLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztNQUMzRCxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsS0FBSyxDQUFDO01BQzlCLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsUUFB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
